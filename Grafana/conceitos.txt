Métricas imporntantes sobre Monitoramento
- Disponibilidade
- Escalabilidade
- Desempenho
- Custo
- SLA (Service Level Agreement)
- NOC

Analise de Métricas
- Prever problemas com dados estatísticos
- Monitorar dados relevantes da apalicação
- Preparar a aplicação para períodos críticos do ano

Levantando container Grafana
- docker run -d --user $ID -v /home/vagrant/volumes/grafana/:/var/lib/grafana -p 3000:3000 --name=grafana --network=grafana-net grafana/grafana


Levantando container InfluxDB
- docker run -d -v /home/vagrant/volumes/influxdb/:/var/lib/influxdb -p 8083:8083 -p 8086:8086 -p 25826:25826/udp --name=influxdb --network=grafana-net influxdb:1.0

Instalando Telegraf
- curl -s https://repos.influxdata.com/influxdb.key | sudo apt-key add -
- source /etc/lsb-release
- echo "deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/influxdb.list
- sudo apt-get update && sudo apt-get install apt-transport-https
- sudo apt-get install telegraf

Estressando CPU para teste de comportamento
- sudo apt-get install stress-ng -y
- stress0-ng -c 0 -l 95
- Após instalação e comando acima, o uso da CPU começa aumentar e o gráfico reflete o consumo

Estressando memória para teste de comportamento
- stress-ng --vm-bytes $(awk '/MemAvailable/{printf "%d\n", $2 * 0.9;}' < /proc/meminfo)k --vm-keep -m 1

Adicionar Docker as métricas do telegraf
- sudo usermod -aG docker telegraf
- cat telegraf.conf | grep -A 45 inputs.docker | egrep -v "^#"
    [[inputs.docker]]
    endpoint = "unix:///var/run/docker.sock"
    container_names = []
    container_name_include = []
    container_name_exclude = []
    timeout = "5s"
    total = false
- sudo service telegraf status

Intalando Apache 
- sudo apt-get install apache2 -y
- sudo usermod -aG adm telegraf
- Posteriormente, deve-se editar o telegraf.conf para passar a monitorar os dados do apache
- Exemplo de query para montar gráfico do grafana: SELECT count("request") FROM "apache_access_log" WHERE ("host" =~ /^$server$/)  AND "resp_code" = '404'  AND $timeFilter AND "agent" != 'Go-http-client/1.1' AND agent != 'worldping-api'
- Estressando a quantidade de requests (for i in {1..501}; do curl http://localhost/  > /dev/null 2>&1;done)
- Estressando a quantidade de requests invalidos (for i in {1..501}; do curl http://localhost/alura  > /dev/null 2>&1;done)

Como levantar o Grafana
- Dentro da pasta do projeto: vagrant up
- Vagrant ssh
- docker ps -a (ve os containers desligados)
- docker start grafana (considerando que o container ja havia sido levatando)
- docker start influxdb
- abrir no navegador em http://192.168.33.10:3000