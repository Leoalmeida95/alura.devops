Métricas imporntantes sobre Monitoramento
- Disponibilidade
- Escalabilidade
- Desempenho
- Custo
- SLA (Service Level Agreement)
- NOC

Analise de Métricas
- Prever problemas com dados estatísticos
- Monitorar dados relevantes da apalicação
- Preparar a aplicação para períodos críticos do ano

Levantando container Grafana
- docker run -d --user $ID -v /home/vagrant/volumes/grafana/:/var/lib/grafana -p 3000:3000 --name=grafana --network=grafana-net grafana/grafana


Levantando container InfluxDB
- docker run -d -v /home/vagrant/volumes/influxdb/:/var/lib/influxdb -p 8083:8083 -p 8086:8086 -p 25826:25826/udp --name=influxdb --network=grafana-net influxdb:1.0

Instalando Telegraf
- curl -s https://repos.influxdata.com/influxdb.key | sudo apt-key add -
- source /etc/lsb-release
- echo "deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/influxdb.list
- sudo apt-get update && sudo apt-get install apt-transport-https
- sudo apt-get install telegraf

Estressando CPU para teste de comportamento
- sudo apt-get install stress-ng -y
- stress0-ng -c 0 -l 95
- Após instalação e comando acima, o uso da CPU começa aumentar e o gráfico reflete o consumo

Estressando memória para teste de comportamento
- stress-ng --vm-bytes $(awk '/MemAvailable/{printf "%d\n", $2 * 0.9;}' < /proc/meminfo)k --vm-keep -m 1

Como levantar o Grafana
- Dentro da pasta do projeto: vagrant up
- Vagrant ssh
- docker ps -a (ve os containers desligados)
- docker start grafana (considerando que o container ja havia sido levatando)
- docker start influxdb
- abrir no navegador em http://192.168.33.10:3000